global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal


#==============================================================================#
#=================================  General  ==================================#
#==============================================================================#


snippet incg "includegraphics" bA
\includegraphics[${1:width}=${2:1.0}\text$1]{$3}$0
endsnippet

snippet use "usepackage" b
\usepackage[$1]{$2}
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

priority 1000
snippet item "itemize" bA
\begin{itemize}
    \item $0
\end{itemize}
endsnippet

snippet align "align" bA
\begin{align}
    $1
\end{align}
$0
endsnippet

snippet [] "[] left-right" 
\left[ $1 \right]$0
endsnippet

snippet ac "acronym" 
\ac{$1} $0
endsnippet

snippet acp "acronym - plural" 
\acp{$1} $0
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	\includegraphics[width=${2:0.8}\textwidth]{$3}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

#==============================================================================#
#==================================  Beamer  ==================================#
#==============================================================================#

snippet beamer "Beamer preamble" b
\documentclass{beamer}
\usepackage{amsmath, amssymb}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage{bm}

\title{${1:title}}
\author{Niklas Korsbo}
\institute{The Sainsbury Laboratory, University of Cambridge}

\begin{document}

\begin{frame}
	\maketitle	
\end{frame}

$0

\end{document}
endsnippet

snippet frame "Beamer frame" Ab
\begin{frame}[t]{$1}
    $0
\end{frame}
endsnippet

#################
#  Mathematics  #
#################
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}`!p
if t[2] and t[2][0] not in ['_', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

context "math()"
snippet -> "leads to" Ai
\to
endsnippet

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


context "math()"
snippet ... "ldots" wiA
\ldots
endsnippet


context "math()"
snippet * "cdot" iA
 \cdot 
endsnippet

priority 10
context "math()"
snippet * "cdot" wiA
\cdot 
endsnippet

###############
#  fractions  #
###############
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z0-9_^]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

######################
#  end of fractions  #
######################

global !p
def	complete(t,opts):
    if t:
        #if t.endswith(" "):
            #opts = [ m[len(t)-1:] for m in opts if m.startswith(str(t)[:-1]) ]
            #return opts[0]
        #else:
        opts = [ m[len(t):] for m in opts if m.startswith(t) ]
        if len(opts)==1:
            return opts[0]
    return "(" + "|".join(opts) + ")" 

# get all the cite-keys from a .bib file into a list of strings.
def get_cite_keys(bib_file="library.bib"):
	bib=open(bib_file,"r")
	cite_keys = []
	for line in bib:
	    # all entries start with an @
		if line[0]=="@":
		    # The cite-key is always preceeded by a '{'
			# and followed by a single character ','
		    cite_keys.append(line.split("{")[1][:-2])
	return cite_keys
			
endglobal

snippet cite "cite with autocompletion"
\cite{$1`!p 
#cite_keys=["test", "test2", "teetime", "alfons"]
cite_keys=get_cite_keys()
snip.rv=complete(t[1],cite_keys)`}
endsnippet

snippet test "Description" b
testing: $1`!p 
snip.c=''
snip.rv=''.join(reverse)+str(t[1])` end
endsnippet
